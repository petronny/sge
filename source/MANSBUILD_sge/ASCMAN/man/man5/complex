COMPLEX(5)                 Grid Engine File Formats                 COMPLEX(5)



NNAAMMEE
       complex - Grid Engine complexes configuration file format

DDEESSCCRRIIPPTTIIOONN
       _C_o_m_p_l_e_x  reflects  the format of the Grid Engine complex configuration.
       The definition of complex attributes provides all pertinent information
       concerning the resource attributes a user may request for a Grid Engine
       job via the _q_s_u_b(1) --ll option, and  for  the  interpretation  of  these
       parameters within the Grid Engine system.

       The  Grid  Engine complex object defines all entries which are used for
       configuring the global, the host, and queue objects. The system  has  a
       set  of  pre-defined  entries, which are assigned to a host or queue by
       default.  In addition, the user can define new entries and assign  them
       to  one  or  more  objects. Each load value has to have a corresponding
       complex entry object, which defines the type and the relational  opera-
       tor for it.

   ddeeffiinniinngg rreessoouurrccee aattttrriibbuutteess
       The complex configuration should not be accessed directly.  In order to
       add or modify complex entries, the _q_c_o_n_f(1) options -Mc and -mc  should
       be  used  instead.   While the -Mc option takes a _c_o_m_p_l_e_x configuration
       file as an argument and overrides the current  configuration,  the  -mc
       option  brings up an editor filled in with the current _c_o_m_p_l_e_x configu-
       ration.

       The provided list contains all definitions of  resource  attributes  in
       the  system. Adding a new entry means to provide: name, shortcut, type,
       relop, requestable, consumable, default, and urgency.  The  fields  are
       described  below.  Changing one is easily done by updating the field to
       change, and removing an entry by deleting its definition. An  attribute
       can only be removed when it is not referenced in a host or queue object
       anymore. Also the system has a set of default resource attributes which
       are always attached to a host or queue. They cannot be deleted, nor can
       the type of such an attribute be changed.

   wwoorrkkiinngg wwiitthh rreessoouurrccee aattttrriibbuutteess
       Before a user can request a resource attribute it has to be attached to
       the  global,  host, or queue object. The resource attribute exists only
       for the objects it got attached to.  If it is attached  to  the  global
       object  (qconf  -me global), it exists system-wide.  Attached to a host
       object (qconf -me NAME), it exists only on that host, and  attached  to
       queue object (qconf -mq NAME), only on that queue.

       When  an administrator attaches a resource attribute to an object, they
       also have to assign a value to it: the resource limit. Another  way  to
       get a resource attribute value is by configuring a load sensor for that
       attribute.

   DDeeffaauulltt qquueeuuee rreessoouurrccee aattttrriibbuutteess
       In its default form it contains a selection of parameters in the  queue
       configuration as defined in _q_u_e_u_e___c_o_n_f(5).  The principal queue config-
       uration parameters requestable for a job by the user are:

              qname
              hostname
              notify
              calendar
              min_cpu_interval
              tmpdir
              seq_no
              s_rt
              h_rt
              s_cpu
              h_cpu
              s_data
              h_data
              s_stack
              h_stack
              s_core
              h_core
              s_rss
              h_rss

   DDeeffaauulltt hhoosstt rreessoouurrccee aattttrriibbuutteess
       The standard set of host-related attributes consists of two categories.
       The  first  category is built by several queue configuration attributes
       which are particularly suitable to be managed on a  host  basis.  These
       attributes are:

              slots
              s_vmem
              h_vmem
              s_fsize
              h_fsize

       (Please refer to _q_u_e_u_e___c_o_n_f(5) for details.)

       NNoottee:: Defining these attributes in the host complex is no contradiction
       to having them also in the queue configuration. It  allows  maintaining
       the  corresponding  resources on a host level and at the same time on a
       queue level. Total virtual free memory (h_vmem) can be  managed  for  a
       host,  for  example, and a subset of the total amount can be associated
       with a queue on that host.

       The second attribute category in the standard host complex  is  of  the
       default  load  values  every  _s_g_e___e_x_e_c_d(8) periodically reports load to
       _s_g_e___q_m_a_s_t_e_r(8).  The reported load values are either the standard  Grid
       Engine  load  values,  such as the CPU load average (see _u_p_t_i_m_e(1)), or
       load  values  defined  by  the  Grid  Engine  administration  (see  the
       llooaadd__sseennssoorr  parameter in the cluster configuration _s_g_e___c_o_n_f(5) and the
       _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e  for  details).   The
       definition  of  characteristics for the standard load values is part of
       the default  host  complex,  while  administrator-defined  load  values
       require  extension  of  the  host  complex.  Please  refer  to the file
       <sge_root>/doc/load_parameters.asc  for  detailed  information  on  the
       standard set of load values.

   OOvveerrrriiddiinngg aattttrriibbuutteess
       An  attribute  can  be  assigned to the global object, host object, and
       queue object at the same time. On the host level it might get its value
       from  the  user-defined  resource  limit  and  a  load  sensor.  If the
       attribute is a consumable, we have in addition to  the  resource  limit
       and  its  load  report at host level also the internal usage, which the
       system keeps track of. The merge is done as follows:

       In general an attribute can be overridden on a lower level
          - global by hosts and queues
          - hosts by queues and load values or resource  limits  on  the  same
       level.

       We  have  one limitation for overriding attributes based on their rela-
       tional operator:

       !=, == operators can only be overridden on the same  level,  not  on  a
       lower level. The user-defined value always overrides the load value.

       >=,  >,  <=,  <  operators can only be overridden when the new value is
       more restrictive than the old one.

       In the case of a consumable at host level which has also a load sensor,
       the system checks for the current usage, and if the internal accounting
       is more restrictive than the load sensor report, the internal value  is
       kept; if the load sensor report is more restrictive, that one is kept.

       Note,  Grid  Engine  allows  backslashes  (\) be used to escape newline
       characters. The backslash and the newline are  replaced  with  a  space
       character before any interpretation.

FFOORRMMAATT
       The  principal format of a _c_o_m_p_l_e_x configuration is that of a tabulated
       list. Each line starting with a '#' character is a comment  line.  Each
       non-comment line defines one element of the complex. An element defini-
       tion line consists of the following 8 column entries per line  (in  the
       order of appearance):

   nnaammee
       The  name  of  the complex element to be used to request this attribute
       for a job in the _q_s_u_b(1) --ll option. A complex attribute name (see  _c_o_m_-
       _p_l_e_x___n_a_m_e  in  _s_g_e___t_y_p_e_s(1)) may appear only once across all complexes,
       i.e. the complex attribute definition is unique.

   sshhoorrttccuutt
       A shortcut for nnaammee which may also be used to  request  this  attribute
       for  a  job  in the _q_s_u_b(1) --ll option. An attribute sshhoorrttccuutt may appear
       only once across all complexes, so  as  to  avoid  the  possibility  of
       ambiguous complex attribute references.

   ttyyppee
       This  setting determines how the corresponding values are to be treated
       by Grid Engine internally in comparisons or in  load  scaling  for  the
       load complex entries:

       +o  With IINNTT only raw integers are allowed.

       +o  With  DDOOUUBBLLEE floating point numbers in double precision (decimal and
          scientific notation) can be specified.

       +o  With TTIIMMEE time specifiers are allowed. Refer to _q_u_e_u_e___c_o_n_f(5) for  a
          format description.

       +o  With   MMEEMMOORRYY   memory   size   specifiers  are  allowed.  Refer  to
          _q_u_e_u_e___c_o_n_f(5) for a format description.

       +o  With BBOOOOLL the strings TRUE and FALSE are allowed.  When  used  in  a
          load  formula  (refer  to  _s_c_h_e_d___c_o_n_f(5)), TRUE and FALSE get mapped
          into '1' and '0'.

       +o  With SSTTRRIINNGG all strings are allowed and are used for wildcard  regu-
          lar  boolean  expression  matching.  Please see the _s_g_e___t_y_p_e_s(1) man
          page for eexxpprreessssiioonn definition.

          Examples:
           -l arch="*x*|sol*"  :
                results in "arch=lx-x86" OR "arch=lx-amd64"
                   OR "arch=sol-amd64" OR ...
           -l arch="sol-x??"  :
                results in "arch=sol-x86" OR "arch=sol-x64" OR ...
           -l arch="lx2[246]-x86"  :
                results in "arch=lx22-x86" OR "arch=lx24-x86"
                   OR "arch=lx26-x86"
           -l arch="lx2[4-6]-x86"  :
                results in "arch=lx24-x86" OR "arch=lx25-x86"
                   OR "arch=lx26-x86"
           -l arch="lx2[24-6]-x86"  :
                results in "arch=lx22-x86" OR "arch=lx24-x86"
                   OR "arch=lx25-x86" OR "arch=lx26-x86"
           -l arch="!lx-x86&!sol-amd64"  :
                results in NEITHER "arch=lx-x86" NOR "arch=sol-amd64"
           -l arch="lx2[4|6]-amd64"  :
                results in "arch=lx24-amd64" OR "arch=lx26-amd64"

       +o  CCSSTTRRIINNGG is like SSTTRRIINNGG except comparisons are case insensitive.

       +o  RREESSTTRRIINNGG is like SSTTRRIINNGG and it will be deprecated in the future.

       +o  HHOOSSTT is like CCSSTTRRIINNGG but the expression  must  match  a  valid  host
          name.

   rreelloopp
       The  rreellaattiioonn  ooppeerraattoorr..   The relation operator is used when the value
       requested by the user for this parameter is compared against the corre-
       sponding  value  configured for the considered queues. If the result of
       the comparison is false, the job cannot run  in  this  queue.  Possible
       relation  operators are "==", "<", ">", "<=", ">=" and "EXCL". The only
       valid operator for string type attributes is "==".

       The "EXCL" relation operator implements  exclusive  scheduling  and  is
       only  valid for consumable boolean type attributes. Exclusive means the
       result of the comparison is only true if a job requests to be exclusive
       and  no  other exclusive or non-exclusive jobs uses the complex. If the
       job does not request to be exclusive and no other  exclusive  job  uses
       the complex the comparison is also true.

   rreeqquueessttaabbllee
       The  entry  can  be used in a _q_s_u_b(1) resource request if this field is
       set to 'y' or 'yes'.  If set to 'n' or 'no' this entry cannot  be  used
       by  a  user  in  order to request a queue or a class of queues.  If the
       entry is set to 'forced' or 'f' the attribute has to be requested by  a
       job or it is rejected.

       To  enable  resource  request enforcement the existence of the resource
       has to be defined. This can be done on a cluster global, per  host  and
       per  queue  basis. The definition of resource availability is performed
       with the complex_values entry in _h_o_s_t___c_o_n_f(5) and _q_u_e_u_e___c_o_n_f(5).

   ccoonnssuummaabbllee
       The ccoonnssuummaabbllee parameter can be set to either 'yes' ('y'  abbreviated),
       'no'  ('n')  or  'JOB' ('j'). It can be set to 'yes' and 'JOB' only for
       numeric attributes (INT, DOUBLE, MEMORY, TIME - see ttyyppee above). If set
       to  'yes' or 'JOB' the consumption of the corresponding resource can be
       managed by Grid Engine internal bookkeeping. In this case  Grid  Engine
       accounts  for the consumption of this resource for all running jobs and
       ensures that jobs are only dispatched if the Grid Engine internal book-
       keeping  indicates  enough  available consumable resources. Consumables
       are an efficient means to manage limited resources  such  as  available
       memory,  free  space  on  a  file system, network bandwidth or floating
       software licenses.

       A consumable defined by 'y' is a per-slot consumable, which  means  the
       limit is multiplied by the number of slots being used by the job before
       being applied.  In case of 'j' the consumable is a per-job  consumable.
       This resource is debited as requested (without multiplication) from the
       allocated master queue. The resource need  not  be  available  for  the
       slave task queues.

       Consumables  can  be combined with default or user-defined load parame-
       ters (see _s_g_e___c_o_n_f(5)  and  _h_o_s_t___c_o_n_f(5)),  i.e.  load  values  can  be
       reported  for  consumable attributes, or the consumable flag can be set
       for load attributes. The Grid  Engine  consumable  resource  management
       takes  both  the  load (measuring availability of the resource) and the
       internal bookkeeping into account in this case,  and  makes  sure  that
       neither exceeds a given limit.

       To  enable  consumable  resource management the basic availability of a
       resource has to be defined. This can be done on a cluster  global,  per
       host and per queue basis, and these categories may supersede each other
       in the given order (i.e. a host can restrict availability of a  cluster
       resource and a queue can restrict host and cluster resources). The def-
       inition of resource availability is performed with  the  ccoommpplleexx__vvaalluueess
       entry in _h_o_s_t___c_o_n_f(5) and _q_u_e_u_e___c_o_n_f(5).  The ccoommpplleexx__vvaalluueess definition
       of the "global" host specifies cluster global consumable  settings.  To
       each  consumable complex attribute in a ccoommpplleexx__vvaalluueess List, a value is
       assigned which denotes the maximum available amount for that  resource.
       The  internal  bookkeeping  will  subtract  from this total the assumed
       resource consumption by all running jobs as expressed through the jobs'
       resource requests.

       NNoottee::  Jobs  can  be  forced  to request a resource and thus to specify
       their assumed consumption via the  'force'  value  of  the  rreeqquueessttaabbllee
       parameter (see above).

       NNoottee  aallssoo::  A default resource consumption value can be pre-defined by
       the administrator for consumable attributes not explicitly requested by
       the  job  (see the ddeeffaauulltt parameter below). This is meaningful only if
       requesting the attribute is not enforced as explained above.

       See the _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e for  examples
       of the usage of the consumable resources facility.

   ddeeffaauulltt
       Meaningful  only  for  consumable  complex  attributes  (see ccoonnssuummaabbllee
       parameter above). Grid Engine assumes the resource  amount  denoted  in
       the  ddeeffaauulltt  parameter  implicitly  to  be consumed by jobs being dis-
       patched to a host or queue  managing  the  consumable  attribute.  Jobs
       explicitly  requesting the attribute via the _-_l option to _q_s_u_b(1) over-
       ride this default value.

   uurrggeennccyy
       The urgency value allows influencing job priorities on a  per  resource
       base.  The  urgency  value  effects  the  addend for each resource when
       determining the resource  request  related  urgency  contribution.  For
       numeric type resource requests the addend is the product of the urgency
       value, the job's assumed slot allocation, and the per-slot  request  as
       specified  via  the _-_l option to _q_s_u_b(1).  For string type requests the
       resource's urgency value is directly used as addend. Urgency values are
       of  type real. See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview of job priori-
       ties.

SSEEEE AALLSSOO
       _s_g_e___i_n_t_r_o(1), _s_g_e___t_y_p_e_s(1), _q_c_o_n_f(1), _q_s_u_b(1), _u_p_t_i_m_e(1), _h_o_s_t___c_o_n_f(5),
       _q_u_e_u_e___c_o_n_f(5), _s_g_e___e_x_e_c_d(8), _s_g_e___q_m_a_s_t_e_r(8)
       _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e_.

CCOOPPYYRRIIGGHHTT
       See _s_g_e___i_n_t_r_o(1) for a full statement of rights and permissions.



SGE 8.0.0                $Date: 2011-05-20 20:36:45 $               COMPLEX(5)
