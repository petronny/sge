SCHED_CONF(5)              Grid Engine File Formats              SCHED_CONF(5)



NNAAMMEE
       sched_conf - Grid Engine default scheduler configuration file

DDEESSCCRRIIPPTTIIOONN
       _s_c_h_e_d___c_o_n_f  defines  the  configuration  file  format for Grid Engine's
       scheduler.  In order to modify the  configuration,  use  the  graphical
       user's interface _q_m_o_n(1) or the _-_m_s_c_o_n_f option of the _q_c_o_n_f(1) command.
       A default configuration is provided with the Grid  Engine  distribution
       package.

       Note,  Grid  Engine  allows  backslashes  (\) be used to escape newline
       characters. The backslash and the newline are replaced with a space  ("
       ") character before any interpretation.

FFOORRMMAATT
       The following parameters are recognized by the Grid Engine scheduler if
       present in _s_c_h_e_d___c_o_n_f:

   aallggoorriitthhmm
       NNoottee:: Deprecated, may be removed in future release.
       Allows for the selection of alternative scheduling algorithms.

       Currently ddeeffaauulltt is the only allowed setting.

   llooaadd__ffoorrmmuullaa
       A simple algebraic expression used to derive  a  single  weighted  load
       value  from all or part of the load parameters reported by _s_g_e___e_x_e_c_d(8)
       for each host and from all or part of  the  consumable  resources  (see
       _c_o_m_p_l_e_x(5))  being  maintained for each host.  The load formula expres-
       sion syntax is that of a sum of weighted load values, that is:

              {w1|load_val1[*w1]}[{+|-}{w2|load_val2[*w2]}[{+|-}...]]

       NNoottee, no blanks are allowed in the load formula.
       The load values and consumable resources (load_val1, ...)   are  speci-
       fied by the name defined in the complex (see _c_o_m_p_l_e_x(5)).
       NNoottee::  Administrator-defined load values (see the llooaadd__sseennssoorr parameter
       in _s_g_e___c_o_n_f(5) for details) and consumable resources available for  all
       hosts  (see _c_o_m_p_l_e_x(5)) may be used as well as Grid Engine default load
       parameters.
       The weighting factors  (w1,  ...)  are  positive  integers.  After  the
       expression  is  evaluated for each host the results are assigned to the
       hosts and are used to sort the  hosts  corresponding  to  the  weighted
       load. The sorted host list is used to sort queues subsequently.
       The default load formula is "np_load_avg".

   jjoobb__llooaadd__aaddjjuussttmmeennttss
       The  load  which is imposed by the Grid Engine jobs running on a system
       varies in time, and often, e.g. for the CPU load, requires some  amount
       of  time  to  be  reported in the appropriate quantity by the operating
       system. Consequently, if a job was started very recently, the  reported
       load  may  not provide a sufficient representation of the load which is
       already imposed on that host by the job. The reported load  will  adapt
       to  the  real  load  over  time,  but  the period of time, in which the
       reported load is too low, may already lead to  an  oversubscription  of
       that   host.   Grid   Engine   allows   the  administrator  to  specify
       jjoobb__llooaadd__aaddjjuussttmmeennttss which are used in the  Grid  Engine  scheduler  to
       compensate for this problem.
       The  jjoobb__llooaadd__aaddjjuussttmmeennttss  are  specified  as a comma-separated list of
       arbitrary load parameters or consumable resources and (separated by  an
       equal sign) an associated load correction value. Whenever a job is dis-
       patched to a host by the scheduler, the load parameter  and  consumable
       value  set  of  that  host  is  increased by the values provided in the
       jjoobb__llooaadd__aaddjjuussttmmeennttss list. These correction values are decayed linearly
       over  time  until  after  llooaadd__aaddjjuussttmmeenntt__ddeeccaayy__ttiimmee from the start the
       corrections reach the value 0.  If  the  jjoobb__llooaadd__aaddjjuussttmmeennttss  list  is
       assigned  the  special  denominator  NONE, no load corrections are per-
       formed.
       The adjusted load and consumable values are used to  compute  the  com-
       bined  and weighted load of the hosts with the llooaadd__ffoorrmmuullaa (see above)
       and to compare the load and consumable values against the load  thresh-
       old  lists defined in the queue configurations (see _q_u_e_u_e___c_o_n_f(5)).  If
       the llooaadd__ffoorrmmuullaa consists simply of the default CPU load average param-
       eter _n_p___l_o_a_d___a_v_g, and if the jobs are very compute intensive, one might
       want to set the jjoobb__llooaadd__aaddjjuussttmmeennttss list  to  _n_p___l_o_a_d___a_v_g_=_1_._0_0,  which
       means  that  every  new job dispatched to a host will require 100 % CPU
       time, and thus the machine's load is instantly increased by 1.00.

   llooaadd__aaddjjuussttmmeenntt__ddeeccaayy__ttiimmee
       The load corrections  in  the  "jjoobb__llooaadd__aaddjjuussttmmeennttss"  list  above  are
       decayed  linearly  over time from the point of the job start, where the
       corresponding load or consumable parameter is raised by the  full  cor-
       rection   value,   until   after   a   time   period  of  "llooaadd__aaddjjuusstt--
       mmeenntt__ddeeccaayy__ttiimmee", where the correction becomes  0.  Proper  values  for
       "llooaadd__aaddjjuussttmmeenntt__ddeeccaayy__ttiimmee" greatly depend upon the load or consumable
       parameters used and the specific operating system(s).  Therefore,  they
       can  only  be  determined  on-site and experimentally.  For the default
       _n_p___l_o_a_d___a_v_g load parameter a "llooaadd__aaddjjuussttmmeenntt__ddeeccaayy__ttiimmee" of 7  minutes
       has proven to yield reasonable results.

   mmaaxxuujjoobbss
       The  maximum  number of jobs any user may have running in a Grid Engine
       cluster at the same time. If set to 0 (default) the users  may  run  an
       arbitrary number of jobs.

   sscchheedduullee__iinntteerrvvaall
       At  the time the scheduler thread initially registers at the event mas-
       ter thread in the _s_g_e___q_m_a_s_t_e_r(8)process sscchheedduullee__iinntteerrvvaall  is  used  to
       set the time interval in which the event master thread sends scheduling
       event updates to the scheduler thread.  A scheduling event is a  status
       change  that  has  occurred  within _s_g_e___q_m_a_s_t_e_r(8) which may trigger or
       affect scheduler decisions (e.g. a job has finished and thus the  allo-
       cated resources are available again).
       In  the Grid Engine default scheduler the arrival of a scheduling event
       report triggers a scheduler run. The scheduler waits for event  reports
       otherwise.
       SScchheedduullee__iinntteerrvvaall  is  a time value (see _q_u_e_u_e___c_o_n_f(5) for a definition
       of the syntax of time values).

   qquueeuuee__ssoorrtt__mmeetthhoodd
       This parameter determines in which order  several  criteria  are  taken
       into  account  to  produce a sorted queue list. Currently, two settings
       are valid: sseeqqnnoo and llooaadd. However in both cases, Grid Engine  attempts
       to  maximize  the number of soft requests (see _q_s_u_b(1) --ss option) being
       fulfilled by the queues for a particular job as the primary criterion.
       Then, if the qquueeuuee__ssoorrtt__mmeetthhoodd parameter is set to sseeqqnnoo,  Grid  Engine
       will  use  the sseeqq__nnoo parameter as configured in the current queue con-
       figurations (see _q_u_e_u_e___c_o_n_f(5)) as the next criterion to sort the queue
       list.  The  llooaadd__ffoorrmmuullaa  (see  above) has only a meaning if two queues
       have equal sequence numbers.  If qquueeuuee__ssoorrtt__mmeetthhoodd is set to  llooaadd  the
       load  according  the  llooaadd__ffoorrmmuullaa  is the criterion after maximizing a
       job's soft requests, and the sequence number is only used if two  hosts
       have  the same load.  The sequence number sorting is most useful if you
       want to define a fixed order in which queues are to be filled (e.g. the
       cheapest resource first).

       The default for this parameter is llooaadd.

   hhaallffttiimmee
       When  executing  under a share based policy, the scheduler "ages" (i.e.
       decreases) usage to implement a sliding window for achieving the  share
       entitlements  as  defined  by  the share tree. The hhaallffttiimmee defines the
       time interval in which accumulated usage will have been decayed to half
       its original value. Valid values are specified in hours or according to
       the time format as specified in _q_u_e_u_e___c_o_n_f(5).
       If the value is set to 0, the usage is not decayed.

   uussaaggee__wweeiigghhtt__lliisstt
       Grid Engine accounts for the consumption  of  the  resources  CPU-time,
       memory  and IO to determine the usage which is imposed on a system by a
       job. A single usage value is computed from these three input parameters
       by multiplying the individual values by weights and adding them up. The
       weights are defined in the uussaaggee__wweeiigghhtt__lliisstt. The format of the list is

              cpu=wcpu,mem=wmem,io=wio

       where wcpu, wmem and wio are the configurable weights. The weights  are
       real numbers. The sum of all three weights should be 1.

   ccoommppeennssaattiioonn__ffaaccttoorr
       Determines  how fast Grid Engine should compensate for past usage below
       or above the share entitlement defined in the share  tree.  Recommended
       values are between 2 and 10, where 10 means faster compensation.

   wweeiigghhtt__uusseerr
       The  relative  importance  of the user shares in the functional policy.
       Values are of type real.

   wweeiigghhtt__pprroojjeecctt
       The relative importance of the project shares in the functional policy.
       Values are of type real.

   wweeiigghhtt__ddeeppaarrttmmeenntt
       The relative importance of the department shares in the functional pol-
       icy. Values are of type real.

   wweeiigghhtt__jjoobb
       The relative importance of the job shares  in  the  functional  policy.
       Values are of type real.

   wweeiigghhtt__ttiicckkeettss__ffuunnccttiioonnaall
       The  maximum number of functional tickets available for distribution by
       Grid Engine. Determines the relative importance of the functional  pol-
       icy.  See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__ttiicckkeettss__sshhaarree
       The maximum number of share based tickets available for distribution by
       Grid Engine. Determines the relative importance of the share tree  pol-
       icy. See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__ddeeaaddlliinnee
       The  weight  applied  on  the remaining time until a job's latest start
       time. Determines the relative importance of  the  deadline.  See  under
       _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__wwaaiittiinngg__ttiimmee
       The  weight  applied on the job's waiting time since submission. Deter-
       mines the relative importance of the waiting time.  See under  _s_g_e___p_r_i_-
       _o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__uurrggeennccyy
       The  weight  applied  on  jobs' normalized urgency when determining the
       priority finally used.  Determines the relative importance of  urgency.
       See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__pprriioorriittyy
       The  weight applied on jobs' normalized POSIX priority when determining
       the priority finally used. Determines the relative importance of  POSIX
       priority.  See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job priorities.

   wweeiigghhtt__ttiicckkeett
       The weight applied on the normalized ticket amount when determining the
       priority finally used.   Determines  the  relative  importance  of  the
       ticket  policies. See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job pri-
       orities.

   fflluusshh__ffiinniisshh__sseecc
       This parameter is provided for tuning the system's scheduling behavior.
       By  default,  a  scheduler  run is triggered in the scheduler interval.
       When this parameter is set to 1 or larger, the scheduler will be  trig-
       gered  x  seconds after a job has finished. Setting this parameter to 0
       disables the flush after a job has finished.

   fflluusshh__ssuubbmmiitt__sseecc
       This parameter is provided for tuning the system's scheduling behavior.
       By  default,  a  scheduler  run is triggered in the scheduler interval.
       When this parameter is set to 1 or larger, the scheduler will be  trig-
       gered   x seconds after a job was submitted to the system. Setting this
       parameter to 0 disables the flush after a job was submitted.

   sscchheedddd__jjoobb__iinnffoo
       The default scheduler can keep track of why jobs could not be scheduled
       during  the  last scheduler run. This parameter enables or disables the
       observation.  The value ttrruuee enables the monitoring ffaallssee turns it off.

       It is also possible to activate the observation only for certain  jobs.
       This  will  be  done  if the parameter is set to jjoobb__lliisstt followed by a
       comma-separated list of job ids.

       The user can obtain the collected information with the command _q_s_t_a_t-j_.

   ppaarraammss
       This is for passing additional parameters to the Grid Engine scheduler.
       The following values are recognized:

       _D_U_R_A_T_I_O_N___O_F_F_S_E_T
              If set, overrides the default of value 60 seconds.  This parame-
              ter is used by the Grid Engine scheduler when planning  resource
              utilization as the delta between net job runtimes and total time
              until resources become available again. Net job runtime as spec-
              ified  with  -l  h_rt=...   or  -l  s_rt=... or ddeeffaauulltt__dduurraattiioonn
              always differs from total job runtime due to delays  before  and
              after  actual  job start and finish. Among the delays before job
              start is the time until the end of a sscchheedduullee__iinntteerrvvaall, the time
              it takes to deliver a job to _s_g_e___e_x_e_c_d(8), and the delays caused
              by pprroolloogg in _q_u_e_u_e___c_o_n_f(5),  ssttaarrtt__pprroocc__aarrggss  in  _s_g_e___p_e(5)  and
              ssttaarrtteerr__mmeetthhoodd  in  _q_u_e_u_e___c_o_n_f(5).   The delays after job finish
              include delays due to a forced job termination  (nnoottiiffyy,  tteerrmmii--
              nnaattee__mmeetthhoodd  or  cchheecckkppooiinnttiinngg), procedures run after actual job
              finish,  such  as  ssttoopp__pprroocc__aarrggss  in  _s_g_e___p_e(5)  or  eeppiilloogg  in
              _q_u_e_u_e___c_o_n_f(5), and the delay until a new sscchheedduullee__iinntteerrvvaall.
              If  the offset is too low, resource reservations (see mmaaxx__rreesseerr--
              vvaattiioonn) can be delayed repeatedly due to  an  overly  optimistic
              job circulation time.

       _J_C___F_I_L_T_E_R
              NNoottee:: Deprecated, may be removed in future release.
              If set to true, the scheduler limits the number of jobs it looks
              at during a scheduling run. At the beginning of  the  scheduling
              run  it  assigns each job a specific category, which is based on
              the job's requests, priority settings, and the  job  owner.  All
              scheduling  policies will assign the same importance to each job
              in one category. Therefore the number of jobs per category has a
              FIFO order and can be limited to the number of free slots in the
              system.

              A exception is jobs which request a resource  reservation.  They
              are included regardless of the number of jobs in a category.

              This  setting  is  turned  off  by default, because in very rare
              cases, the scheduler can make  a  wrong  decision.  It  is  also
              advised  to  turn  rreeppoorrtt__ppjjoobb__ttiicckkeettssoff..  Otherwise _q_s_t_a_t _-_e_x_t
              can report outdated ticket amounts. The information shown with a
              _q_s_t_a_t _-_j for a job that was excluded in a scheduling run is very
              limited.

       _P_R_O_F_I_L_E
              If set equal to 1, the scheduler logs profiling information sum-
              marizing each scheduling run.

       _M_O_N_I_T_O_R
              If  set  equal  to 1, the scheduler records information for each
              scheduling run, enabling reproduction of job  resource  utiliza-
              tion in the file _<_s_g_e___r_o_o_t_>_/_<_c_e_l_l_>_/_c_o_m_m_o_n_/_s_c_h_e_d_u_l_e.

       _P_E___R_A_N_G_E___A_L_G
              This  parameter sets the algorithm for the PE range computation.
              The default is automatic, which means that  the  scheduler  will
              select the best one, and it should not be necessary to change it
              to a different setting in normal operation. If a custom  setting
              is needed, the following values are available:
              auto       : the scheduler selects the best algorithm
              least       :  starts the resource matching with the lowest slot
              amount first
              bin        : starts the resource matching in the middle  of  the
              pe slot range
              highest     : starts the resource matching with the highest slot
              amount first

       Changing ppaarraammss will take immediate effect.  The default for ppaarraammss  is
       none.

   rreepprriioorriittiizzee__iinntteerrvvaall
       Interval  (HH:MM:SS)  to reprioritize jobs on the execution hosts based
       on the current ticket amount for the running jobs. If the  interval  is
       set  to  00:00:00 the reprioritization is turned off. The default value
       is 00:00:00.  The reprioritization tickets are calculated by the sched-
       uler  and update events for running jobs are only sent after the sched-
       uler calculated new values. How often the  scheduler  should  calculate
       the  tickets  is  defined  by  the  reprioritize_interval.  Because the
       scheduler is only triggered in a specific interval (scheduler_interval)
       this  means the reprioritize_interval only has a meaning if set greater
       than the scheduler_interval.  For example, if the scheduler_interval is
       2  minutes  and  reprioritize_interval is set to 10 seconds, this means
       the jobs get re-prioritized every 2 minutes.

   rreeppoorrtt__ppjjoobb__ttiicckkeettss
       This parameter allows tuning the system's scheduling run  time.  It  is
       used  to  enable  / disable the reporting of pending job tickets to the
       qmaster.  It does not influence the tickets calculation. The sort order
       of  jobs  in  qstat  and qmon is only based on the submit time when the
       reporting is turned off.
       The reporting should be turned off in a system with a very large amount
       of jobs by setting this parameter to "false".

   hhaallfflliiffee__ddeeccaayy__lliisstt
       The  halflife_decay_list  allows  configuring different decay rates for
       the finished_jobs usage types, which is used in the pending job  ticket
       calculation  to account for jobs which have just ended. This allows the
       user the pending jobs algorithm to count finished jobs against  a  user
       or  project  for  a  configurable  decayed time period. This feature is
       turned off by default, and the halftime is used instead.
       The halflife_decay_list also allows one to  configure  different  decay
       rates for each usage type being tracked (cpu, io, and mem). The list is
       specified in the following format:

              <USAGE_TYPE>=<TIME>[:<USAGE_TYPE>=<TIME>[:<USAGE_TYPE>=<TIME>]]

       <Usage_TYPE> can be one of the following: cpu, io, or mem.
       <TIME> can be -1, 0 or a timespan specified in minutes.  If  <TIME>  is
       -1,  only the usage of currently running jobs is used. 0 means that the
       usage is not decayed.

   ppoolliiccyy__hhiieerraarrcchhyy
       This parameter sets up a dependency  chain  of  ticket-based  policies.
       Each  ticket-based  policy in the dependency chain is influenced by the
       previous policies and influences the following policies. A typical sce-
       nario  is  to assign precedence for the override policy over the share-
       based policy. The override policy determines in such a case how  share-
       based  tickets  are  assigned  among  jobs of the same user or project.
       Note that all policies contribute to the ticket amount  assigned  to  a
       particular  job  regardless of the policy hierarchy definition. Yet the
       tickets calculated in each of the policies can be different,  depending
       on "_P_O_L_I_C_Y___H_I_E_R_A_R_C_H_Y".

       The  "_P_O_L_I_C_Y___H_I_E_R_A_R_C_H_Y"  parameter can be an up to 3 letter combination
       of the first letters of the  3  ticket  based  policies  S(hare-based),
       F(unctional)  and  O(verride). So a value "OFS" means that the override
       policy takes precedence  over  the  functional  policy,  which  finally
       influences  the share-based policy.  Less than 3 letters mean that some
       of the policies do not influence other policies and also are not influ-
       enced  by  other policies. So a value of "FS" means that the functional
       policy influences the share-based policy and that there is no interfer-
       ence with the other policies.

       The special value "NONE" switches off policy hierarchies.

   sshhaarree__oovveerrrriiddee__ttiicckkeettss
       If  set  to  "true"  or  "1",  override  tickets of any override object
       instance are shared equally among all running jobs associated with  the
       object.  The  pending  jobs  will get as many override tickets, as they
       would have, when they were running. If set to "false" or "0", each  job
       gets the full value of the override tickets associated with the object.
       The default value is "true".

   sshhaarree__ffuunnccttiioonnaall__sshhaarreess
       If set to "true" or "1", functional shares  of  any  functional  object
       instance  are  shared among all the jobs associated with the object. If
       set to "false" or "0", each job associated with  a  functional  object,
       gets  the  full  functional shares of that object. The default value is
       "true".

   mmaaxx__ffuunnccttiioonnaall__jjoobbss__ttoo__sscchheedduullee
       The maximum number of pending jobs to schedule in the  functional  pol-
       icy.  The default value is 200.

   mmaaxx__ppeennddiinngg__ttaasskkss__ppeerr__jjoobb
       The  maximum number of subtasks per pending array job to schedule. This
       parameter exists in order to reduce scheduling  overhead.  The  default
       value is 50.

   mmaaxx__rreesseerrvvaattiioonn
       The  maximum  number of reservations scheduled within a schedule inter-
       val.  When a runnable job can not be  started  due  to  a  shortage  of
       resources  a  reservation  can  be scheduled instead. A reservation can
       cover consumable resources with the global host, any execution host and
       any  queue.  For parallel jobs reservations are done also for the slots
       resource as specified in _s_g_e___p_e(5).  As job runtime the maximum of  the
       time  specified  with  -l  h_rt=... or -l s_rt=... is assumed. For jobs
       that have neither of them the default_duration  is  assumed.   Reserva-
       tions  prevent  jobs  of lower priority as specified in _s_g_e___p_r_i_o_r_i_t_y(5)
       from utilizing the reserved resource quota during the time of  reserva-
       tion.   Jobs  of  lower  priority are allowed to utilize those reserved
       resources only if their prospective job end is before the start of  the
       reservation  (backfilling).  Reservation is done only for non-immediate
       jobs (-now no) that request reservation (-R y). If  max_reservation  is
       set to "0" no job reservation is done.

       Note,  that  reservation  scheduling  can  be performance consuming and
       hence reservation scheduling is switched off by default. Since reserva-
       tion  scheduling performance consumption is known to grow with the num-
       ber of pending jobs, the use of the --RR yy option is recommended only for
       those  jobs  actually  queuing for bottleneck resources.  Together with
       the max_reservation parameter, this technique can  be  used  to  narrow
       down performance impacts.

   ddeeffaauulltt__dduurraattiioonn
       When   job   reservation   is   enabled   through  the  max_reservation
       _s_c_h_e_d___c_o_n_f(5) Parameter, the default duration is assumed as runtime for
       jobs  that  have neither -l h_rt=... nor -l s_rt=... specified. In con-
       trast to a h_rt/s_rt time limit the default_duration is not enforced.

FFIILLEESS
       _<_s_g_e___r_o_o_t_>_/_<_c_e_l_l_>_/_c_o_m_m_o_n_/_s_c_h_e_d___c_o_n_f_i_g_u_r_a_t_i_o_n
                  scheduler thread configuration

SSEEEE AALLSSOO
       _s_g_e___i_n_t_r_o(1),  _q_a_l_t_e_r(1),  _q_c_o_n_f(1),  _q_s_t_a_t(1),  _q_s_u_b(1),   _c_o_m_p_l_e_x(5),
       _q_u_e_u_e___c_o_n_f(5),  _s_g_e___e_x_e_c_d(8),  _s_g_e___q_m_a_s_t_e_r(8), _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n
       _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e

CCOOPPYYRRIIGGHHTT
       See _s_g_e___i_n_t_r_o(1) for a full statement of rights and permissions.



SGE 8.0.0                $Date: 2011-05-17 19:18:22 $            SCHED_CONF(5)
